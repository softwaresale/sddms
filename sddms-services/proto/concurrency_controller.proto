
syntax = "proto3";

import "api_result.proto";
import "finalize_mode.proto";

package sddms.cc;

message RegisterSiteRequest {
  // the host of this site
  string host = 1;
  // the port this site is serving on
  uint32 port = 2;
}

message RegisterSiteResponse {
  // api return status
  sddms.shared.ReturnStatus ret = 1;
  // the site's newly created site id
  uint32 site_id = 2;
}

message RegisterTransactionRequest {
  // The requesting site
  uint32 site_id = 1;
  // an optional name of the request. if none is given, then one will be auto-generated
  optional string name = 2;
}

message RegisterTransactionResponse {
  // api return status
  sddms.shared.ReturnStatus ret = 1;
  // the newly created transaction's id
  uint32 trans_id = 2;
}

enum LockMode {
  LOCK_MODE_UNSPECIFIED = 0;
  LOCK_MODE_EXCLUSIVE = 1;
  LOCK_MODE_SHARED = 2;
}

message AcquireLockRequest {
  // the site requesting the lock
  uint32 site_id = 1;
  // the transaction requesting the lock
  uint32 transaction_id = 2;
  // the table we want to lock
  string record_name = 3;
  // what kind of lock we want to acquire
  LockMode lock_mode = 4;
}

message AcquireLockResponse {
  // API return status
  sddms.shared.ReturnStatus ret = 1;
  // if the lock was successfully acquired??
  bool acquired = 2;
}

message ReleaseLockRequest {
  // the site requesting the lock
  uint32 site_id = 1;
  // the transaction requesting the lock
  uint32 transaction_id = 2;
  // the table we want to lock
  string record_name = 3;
}

message ReleaseLockResponse {
  // API return status
  sddms.shared.ReturnStatus ret = 1;
  // if the lock was successfully released??
  bool released = 2;
}

message FinalizeTransactionRequest {
  // the site requesting the lock
  uint32 site_id = 1;
  // the transaction requesting the lock
  uint32 transaction_id = 2;
  // how we are finalizing: abort/commit
  sddms.shared.FinalizeMode finalize_mode = 3;
}

message FinalizeTransactionResponse {
  // API return status
  sddms.shared.ReturnStatus ret = 1;
}

service ConcurrencyControllerService {
  // site registers itself with the cc
  rpc RegisterSite(RegisterSiteRequest) returns (RegisterSiteResponse) {}
  // a site begins a new transaction
  rpc RegisterTransaction(RegisterTransactionRequest) returns (RegisterTransactionResponse) {}
  // a site tries to acquire a lock for a specific table
  rpc AcquireLock(AcquireLockRequest) returns (AcquireLockResponse) {}
  // a site releases its lock on the given table
  rpc ReleaseLock(ReleaseLockRequest) returns (ReleaseLockResponse) {}
  // a site finalizes a transaction
  rpc FinalizeTransaction(FinalizeTransactionRequest) returns (FinalizeTransactionResponse) {}
}
