
syntax = "proto3";

import "api_result.proto";
import "finalize_mode.proto";

package sddms.site_manager;

message RegisterClientRequest {
  /// host of the current client
  string host = 1;
  /// the port of the current client
  uint32 port = 2;
}

message RegisterClientResults {
  /// the id of the new client
  uint32 client_id = 1;
}

message RegisterClientResponse {
  sddms.shared.ReturnStatus ret = 1;
  oneof register_client_payload {
    sddms.shared.ApiError error = 2;
    RegisterClientResults results = 3;
  }
}

message BeginTransactionRequest {
  // the optional name of the transaction
  optional string transaction_name = 1;
  // the client making this request
  uint32 client_id = 2;
}

message BeginTransactionResults {
  uint32 transaction_id = 2;
}

message BeginTransactionResponse {
  // success or failure
  sddms.shared.ReturnStatus ret = 1;
  oneof begin_transaction_payload {
    sddms.shared.ApiError error = 2;
    BeginTransactionResults value = 3;
  };
}

message InvokeQueryRequest {
  // the actual query text
  string query = 1;
  // the tables we are writing
  repeated string write_set = 2;
  // the tables we are reading from
  repeated string read_set = 3;
  uint32 transaction_id = 4;
  // if we expect to get results back from the query
  bool has_results = 5;
  // true if the given query should be treated as a transaction with a single statement
  bool single_stmt_transaction = 6;
  // the client making this request
  uint32 client_id = 7;
}

message InvokeQueryResults {
  // if any data was read, returns a cbor payload, which is a list of records
  optional bytes data_payload = 1;
  // how many records were affected by query, in lieu of payload data
  optional uint32 affected_records = 2;
  // the names of each of the columns, if relevant
  repeated string column_names = 3;
}

message InvokeQueryResponse {
  // return status
  sddms.shared.ReturnStatus ret = 1;
  oneof invoke_query_payload {
    sddms.shared.ApiError error = 2;
    InvokeQueryResults results = 3;
  }
}

message FinalizeTransactionRequest {
  sddms.shared.FinalizeMode mode = 1;
  uint32 transaction_id = 2;
  // the client making this request
  uint32 client_id = 3;
}

message FinalizeTransactionResults {
}

message FinalizeTransactionResponse {
  sddms.shared.ReturnStatus ret = 1;
  oneof finalize_transaction_payload {
    sddms.shared.ApiError error = 2;
    FinalizeTransactionResults results = 3;
  }
}

message ReplicationUpdateRequest {
  // update statements to invoke
  repeated string update_statements = 1;
  // the site that this transaction came from
  uint32 originating_site = 2;
}

message ReplicationUpdateResponse {
  // the return status
  sddms.shared.ReturnStatus ret = 1;
}

service SiteManagerService {
  rpc RegisterClient(RegisterClientRequest) returns (RegisterClientResponse) {}
  rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse) {}
  rpc InvokeQuery(InvokeQueryRequest) returns (InvokeQueryResponse) {}
  rpc FinalizeTransaction(FinalizeTransactionRequest) returns (FinalizeTransactionResponse) {}
  rpc ReplicationUpdate(ReplicationUpdateRequest) returns (ReplicationUpdateResponse) {}
}
